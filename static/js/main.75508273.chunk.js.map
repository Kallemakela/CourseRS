{"version":3,"sources":["components/Course.js","App.js","serviceWorker.js","index.js","courseRank.js"],"names":["props","name","code","mIndex","completed","handleClick","cssClasses","Card","className","Title","Subtitle","FormCheck","checked","onClick","App","state","completedCourses","recommendedCourses","e","clickedCourse","target","setState","prevState","map","course","courseRank","this","Tabs","Tab","eventKey","title","c","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","require","csv","fs","W","createReadStream","pipe","on","row","push","Object","values","slice","value","Number","console","log"],"mappings":"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","file":"static/js/main.75508273.chunk.js","sourcesContent":["import React from 'react'\nimport Card from 'react-bootstrap/Card'\nimport FormCheck from 'react-bootstrap/FormCheck'\n\nfunction Course(props) {\n  const { name, code, completed, handleClick } = props\n  const cssClasses = `p-2 m-1 course ${completed ? 'completed' : ''}`\n  return (\n    <Card className={cssClasses}>\n      <div>\n        <span>\n          <Card.Title>\n            {name}\n          </Card.Title>\n          <Card.Subtitle>{code}</Card.Subtitle>\n        </span>\n        <span>\n          <FormCheck\n            name={code}\n            checked={completed}\n            onClick={handleClick}\n          />\n        </span>\n      </div>\n    </Card>\n  )\n}\n\nfunction CourseRes(props) {\n  const { name, code, mIndex, handleClick, completed } = props\n  const cssClasses = `p-2 m-1 course ${completed ? 'completed' : ''}    `\n  return (\n    <Card className={cssClasses}>\n      <div>\n        <span>\n          <Card.Title>\n            {name} {code}\n          </Card.Title>\n          <Card.Subtitle>Suitability: {mIndex}</Card.Subtitle>\n        </span>\n      </div>\n    </Card>\n  )\n}\n\nexport default{\n    CourseRes,\n    Course\n}","import React, { Component } from 'react';\nimport './App.css';\nimport courseType from './components/Course'\nimport courseRank from'./courseRank'\n// TODO separate imports for bootstrap\nimport { Button, ButtonGroup, Container, Col, Row, Tabs, Tab } from 'react-bootstrap'\n\nclass App extends Component {\n\n  state = {\n    completedCourses: [\n      {\n        name: 'o1',\n        code: 'CS-1001',\n        completed: false\n      },\n      {\n        name: 'o2',\n        code: 'CS-1002',\n        completed: false,\n      },\n      {\n        name: 'trak',\n        code: 'asdf',\n        completed:false\n      },\n      {\n        name: 'sci',\n        code: 'joku',\n        completed:false\n      },\n      \n    ],\n    recommendedCourses: [\n      /*{\n        name: 'o1',\n        code: 'CS-1001',\n        mIndex: 1\n      },\n      {\n        name: 'o2',\n        code: 'CS-1002',\n        mIndex: 2\n\n      }*/\n    ],\n  }\n  \n  handleClick = (e) => {\n    const clickedCourse = e.target.name\n    this.setState(prevState => {\n      const completedCourses = prevState.completedCourses.map(course => {\n        if (course.code === clickedCourse) {\n          course.completed = !course.completed\n        }\n        return course\n      })\n      this.setState( {recommendedCourses: courseRank(this.state.completedCourses),})\n      return { completedCourses }\n    })\n  }\n  componentDidMount(){\n      this.setState( {recommendedCourses: courseRank(this.state.completedCourses),})\n  }\n\n  render() {\n    const { completedCourses, recommendedCourses } = this.state\n    return (\n      <div className=\"App\">\n        <Tabs>\n          <Tab eventKey=\"completed\" title=\"Completed\">\n            <div>\n              {completedCourses.map(c => (\n                <courseType.Course\n                  name={c.name}\n                  code={c.code}\n                  completed={c.completed}\n                  handleClick={this.handleClick}\n                />\n              ))}\n            </div>\n          </Tab>\n          <Tab eventKey=\"recommendations\" title=\"Recommendations\">\n            <div className='mt-1'>\n              {recommendedCourses.map(c => (\n                <courseType.CourseRes\n                  name={c.name}\n                  code={c.code}\n                  mIndex={c.mIndex}  \n                />\n              ))}\n            </div>\n          </Tab>\n        </Tabs>\n     </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const math = require('mathjs')\nconst csv = require('csv-parser');\nconst fs = require('fs');\n\nconst W = []\n\nfs.createReadStream('./data/weights.csv')\n  .pipe(csv())\n  .on('data', (row) => {\n    W.push(Object.values(row).slice(0, -1).map(value => Number(value)))\n  }).on('end', () => (console.log(W)))\n\n\n// export default function recommend(courseList){\n//     const W = [[0, 1, 0.5, 0],\n//            [0, 0, 1, 0], \n//            [0.5, 1, 0, 0],\n//            [0, 0, 0, 0]]\n\n//     const completedCourses = []\n//     const courseNames = []\n//     for (let i = 0; i< courseList.length;i++){\n//         completedCourses.push(courseList[i].completed)\n//         courseNames.push(courseList[i].name)\n//     }\n    \n//     const courseRank = (courses, W) => {\n//       const rankedCourses = math.multiply(courses, W)\n//       const filtered = []\n//       for (let i = 0; i < courses.length; i++) {\n//         if (!courses[i]) {\n//           filtered.push({name: courseNames[i], code:courseList[i].code, mIndex:rankedCourses[i]})\n//         }\n//       }\n//       return filtered.sort((a, b) => b.mIndex-a.mIndex)\n//     }\n//     return courseRank(completedCourses, W)\n// }\n"],"sourceRoot":""}