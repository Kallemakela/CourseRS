{"version":3,"sources":["components/Course.js","components/CourseRec.js","db.js","App.js","serviceWorker.js","index.js"],"names":["Course","props","name","code","completed","handleClick","cssClasses","Card","className","onClick","id","Title","Subtitle","type","checked","readOnly","CourseRec","index","description","oodiLink","myCoLink","mIndex","Accordion","Toggle","as","Header","eventKey","toFixed","Collapse","Body","Row","Col","sm","href","role","math","require","getRows","path","split","slice","map","row","sigmoid","v","x","c","Math","exp","recommendCourses","courseList","W","Number","completedCourses","course","completedLength","max","filter","Boolean","length","courses","rankedCourses","multiply","filtered","i","push","sort","a","b","courseRank","App","state","recommendedCourses","clickedCourse","setState","prevState","codes","names","descriptions","oodiLinks","myCoLinks","getCourses","this","Tabs","defaultActiveKey","Tab","title","key","Component","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ab043a6.chunk.js","sourcesContent":["import React from 'react'\nimport Card from 'react-bootstrap/Card'\n\nfunction Course(props) {\n  const { name, code, completed, handleClick } = props\n  const cssClasses = `p-2 m-3 course ${completed ? 'completed' : ''}`\n  return (\n    <Card\n      className={cssClasses}\n      onClick={() => handleClick(code)}\n    >\n      <div className='d-flex' id={code}>\n        <div className=\"p-2\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Subtitle>{code}</Card.Subtitle>\n        </div>\n        <div className=\"ml-auto d-flex p-2\">\n          <input\n            type='checkbox'\n            className='checkbox'\n            checked={completed}\n            readOnly\n          />\n        </div>\n      </div>\n    </Card>\n  )\n}\n\nexport default Course","import React from 'react'\nimport Accordion from 'react-bootstrap/Accordion'\nimport Card from 'react-bootstrap/Card'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\n\nfunction CourseRec(props) {\n  const { index, name, code, description, oodiLink, myCoLink, mIndex } = props\n  const cssClasses = `p-2 m-3 course`\n  return (\n    <Card className={cssClasses}>\n      <Accordion.Toggle as={Card.Header} eventKey={`${index}`}>\n        <div className=\"d-flex\">\n        <div className=\"p-2\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Subtitle>{code}</Card.Subtitle>\n        </div>\n          <div className=\"d-flex ml-auto p-2\">\n            <div className='align-self-center'>\n            {mIndex.toFixed(0)}%\n            </div>\n          </div>\n        </div>\n      </Accordion.Toggle>\n      <Accordion.Collapse eventKey={`${index}`}>\n        <Card.Body>\n        <div className=\"d-flex\">\n          <div>\n            {description}\n            <Row className='mt-4'>\n              <Col sm={6} className='d-flex justify-content-center oodi-div'>\n                <a href={oodiLink} className=\"btn btn-dark w-100\" role=\"button\">WebOodi</a>\n              </Col>\n              <Col sm={6} className='d-flex justify-content-center'>\n                <a href={myCoLink} className=\"btn btn-dark w-100\" role=\"button\">MyCourses</a>\n              </Col>\n            </Row>\n          </div>\n        </div>\n        </Card.Body>\n      </Accordion.Collapse>\n    </Card>\n  )\n}\n\nexport default CourseRec","const math = require('mathjs')\n// const fs = require('fs');\n\nconst PATH = './data/weights.csv'\n\n// weights.csv pasted here because we can't read local files in browser\nconst mockCsvStr = `;UWAS-C0036;DOM-E5089;CS-A1110;CS-C3170;CS-E4800;CS-E3210;CS-C3160;MS-C1343;MS-A0309;MS-C2111;TU-C1030;TU-C9260;TU-C9270;TU-A1140;TU-A1150;MUO-C3006;ELEC-A4010;TU-C1020;AAN-C2006;AAN-C2011\n0;Game Design and Production;Games Now!;Programming 1;Web Software Development;Artificial Intelligence;Machine Learning: Basic Principles;Data Science;Linear algebra;Differential and integral calculus 3;Stochastic Processes;Managerial accounting and finance for decision-makers;Studio Course of Industrial Engineering and Management;Introduction to Networks;Leading and Understanding Oneself;Philosophy and Systems Thinking;Basics of Service Design;Electrical Engineering Workshop;Creating Value;Product analysis;ADD BASICS: Working in the Digital Paradigm\n1;The lectures consist of basic concepts of game design and production, focusing more on the design side. Participants develop a small game project, as a group work, beside the lectures. Part of the contact teaching sessions are dedicated for the project related tasks, like evaluation of design, priorities and development progress.;The Games Now! lecture series will present a monthly lecture or panel discussion addressing the hot topics of the game industry. Finnish and international speakers alike will bring the latest information about the many changes affecting the game industry at the moment. The point of view will be multidisciplinary and holistic, and aims to bring together students and industry professionals from all game related fields.;Key content: Programming, imperative programming, object-oriented  programming, reading program code, writing and modifying program code to  conform to a given specification, statements and expressions,  variables, data types, functions, parameters, return values, objects,  classes, methods, arrays and buffers, selection, loops, programming  style, class libraries and program documentation, using an integrated  development environment. Highly recommended content: Stages of program  code (source code, compiler, intermediate language, virtual machine),  program execution (e.g., call stack, garbage collection), reading and  writing text files, key-value maps, traits and inheritance, immutable  vs. mutable objects, function objects, higher-order functions, anonymous  functions, some basic aspects of code quality. Additional content:  graphical user interfaces, recursion, designing one s own program.;The main focus of this course is to view the web as a programming platform. Special emphasis is placed on the distributed nature of a web application, session management and the communication between a web-client and the HTTP-server. How applications and services are developed using modern web frameworks and technologies and what are the opportunities and restrictions imposed by both client and server platforms. Additional topics include security issues, efficiency, scalability, testing, debugging, and deployment.;The course presents a range of central AI techniques and  provides the students with an extensive toolbox for solving problems  in practice. For applications that require high degree of adaptation,  specific techniques such as (deep) machine learning, reinforcement  learning, and graphical models are included. These methods are  instrumental for decision under uncertainty. For the purposes of  knowledge representation and reasoning, different logical  representations such as formulas and rules are covered. These representations establish the foundations for  declarative problem solving and enable the use of state-of-the-art solver technology to search for solutions. The course also encourages  the students to combine the logical and machine learning perspectives  when solving future problems.;The course deals with basic principles needed to understand and apply  machine learning models and methods. The topics include supervised and  unsupervised learning, Bayesian decision theory, parametric methods,  tuning model complexity, dimensionality reduction, clustering,  nonparametric methods, decision trees, comparing and combining  algorithms, as well as a few applications of these methods.;The course serves as an introduction to the topic of  data science and  related topics such as machine learning. You will be  introduced to data  science methods and tools to find interesting  information from data.  Specific topics on the course include processing  of digital signals  such as speech and images, statistical estimation of  parametric  distributions, classification, prediction, clustering,  pattern mining,  and network analysis for developing search engines for  hypertext  collections such as the Web.;Vector spaces, linear maps, norm and inner product, theory and applications of eigenvalues. Systems of differential equations. Linear and shortly also nonlinear systems.;change of variables in multiple integrals, integration in cylindrical and spherical coordinates, vector fields, line and surface integrals, gradient,  divergence, curl, Gauss's, Green's and Stokes' theorems.;Random vectors and random processes. Markov chains. Stochastic population models. Random point patterns and Poisson processes. Martingales, queues, and gambling.;Understanding decision-making situations, especially investment decisions, and respective relevant costs and benefits. Methods for estimating revenues and costs. The required rate of return on capital and other opportunity costs. Decisions concerning capital structure. Considering risk and uncertainty in managerial accounting models. Consideration of the limitations of managerial accounting models in decision making.;The course deals with strategy, operations management and leadership related challenges of knowledge intensive companies.;The course deals with basic concepts of network theory and science.;The course lectures and assignments deal with personal strengths, goal setting and goal achievement, management of time and financial resources, good learning methods, stress factors and stress coping mechanisms, emotions and their impact on thinking and behavior and factors related to social interaction.;The series draws from western philosophical tradition and is strongly applicative.;Kurssilla tutustutaan palvelumuotoilun osaamisalueeseen ja perehdytään siinä käytettäviin suunnitteluprosesseihin ja menetelmiin luentojen ja harjoitustehtävien avulla.;Basics of Arduino and other electronic components. Electrical circuits, sensors, connections and interfaces, combined with software and data networks.;The core components of the course are 1) finding and defining a project with potential for a valuable outcome 2) cooperation with a self-identified company/companies on the opportunity, 3) designing a feasible and executable business experiment for the partner(s), (4) abstraction and reflection of the experience.;Students work in interdisciplinary teams. Each team is assigned a product that is analyzed from the perspectives of design, business, and engineering. The analysis is supported with lectures and workshops related to manufacturing techniques, materials, services, users, etc. The outcome of the analysis is presented in a final gala.;Digital transformation is changing the landscape of product design by introducing new technologies such as additive manufacturing, augmented reality, artificial intelligence and digital platforms. Each year, the course will focus on an emerging technology that is determined at the start of each course.  During the course, students create a value proposition / business plan that is made possible by, or builds on the chosen emergent technology. The outputs include a business model canvas, prototype / demo, and a pitch.\n2;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=UWAS-C0036;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=DOM-E5089;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=CS-A1110;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=CS-C3170;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=CS-E4800;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=CS-E3210;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=CS-C3160;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=MS-C1343;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=MS-A0309;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=MS-C2111;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=TU-C1030;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=TU-C9260;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=TU-C9270;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=TU-A1140;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=TU-A1150;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=MUO-C3006;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=ELEC-A4010;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=TU-C1020;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=AAN-C2006;https://oodi.aalto.fi/a/opintjakstied.jsp?Kieli=6&html=1&Tunniste=AAN-C2011\n3;https://mycourses.aalto.fi/course/search.php?search=UWAS-C0036;https://mycourses.aalto.fi/course/search.php?search=DOM-E5089;https://mycourses.aalto.fi/course/search.php?search=CS-A1110;https://mycourses.aalto.fi/course/search.php?search=CS-C3170;https://mycourses.aalto.fi/course/search.php?search=CS-E4800;https://mycourses.aalto.fi/course/search.php?search=CS-E3210;https://mycourses.aalto.fi/course/search.php?search=CS-C3160;https://mycourses.aalto.fi/course/search.php?search=MS-C1343;https://mycourses.aalto.fi/course/search.php?search=MS-A0309;https://mycourses.aalto.fi/course/search.php?search=MS-C2111;https://mycourses.aalto.fi/course/search.php?search=TU-C1030;https://mycourses.aalto.fi/course/search.php?search=TU-C9260;https://mycourses.aalto.fi/course/search.php?search=TU-C9270;https://mycourses.aalto.fi/course/search.php?search=TU-A1140;https://mycourses.aalto.fi/course/search.php?search=TU-A1150;https://mycourses.aalto.fi/course/search.php?search=MUO-C3006;https://mycourses.aalto.fi/course/search.php?search=ELEC-A4010;https://mycourses.aalto.fi/course/search.php?search=TU-C1020;https://mycourses.aalto.fi/course/search.php?search=AAN-C2006;https://mycourses.aalto.fi/course/search.php?search=AAN-C2011\n4;0.88;0.66;0.86;0.77;0.49;0.48;0.54;0.28;0.49;0.42;0.12;0.08;0.05;0.15;0.0;0.0;0.0;0.0;0.03;0.0\n5;0.8;0.95;0.81;0.78;0.61;0.64;0.56;0.69;0.36;0.39;0.55;0.38;0.36;0.15;0.25;0.0;0.14;0.0;0.0;0.02\n6;0.76;0.71;0.83;0.82;0.8;0.83;0.72;0.74;0.47;0.45;0.38;0.25;0.38;0.31;0.07;0.17;0.06;0.0;0.0;0.1\n7;0.49;0.53;0.88;0.9;0.56;0.7;0.6;0.71;0.52;0.68;0.49;0.2;0.24;0.2;0.12;0.19;0.02;0.06;0.16;0.0\n8;0.58;0.66;0.73;0.95;0.94;0.66;0.86;0.6;0.56;0.51;0.35;0.58;0.48;0.53;0.24;0.3;0.13;0.2;0.09;0.21\n9;0.57;0.79;0.83;0.6;0.83;0.73;0.75;0.87;0.79;0.71;0.61;0.33;0.63;0.55;0.36;0.5;0.07;0.25;0.12;0.0\n10;0.42;0.61;0.74;0.73;0.75;0.67;0.89;0.68;0.67;0.75;0.75;0.69;0.65;0.47;0.25;0.26;0.22;0.24;0.06;0.33\n11;0.45;0.58;0.7;0.52;0.45;0.8;0.93;0.61;0.65;0.87;0.63;0.78;0.67;0.5;0.52;0.51;0.17;0.3;0.34;0.4\n12;0.34;0.57;0.56;0.4;0.41;0.74;0.62;0.83;0.8;0.87;0.67;0.74;0.67;0.58;0.34;0.41;0.42;0.16;0.38;0.1\n13;0.39;0.41;0.54;0.57;0.5;0.74;0.6;0.86;0.55;0.91;0.68;0.51;0.7;0.63;0.35;0.65;0.61;0.57;0.41;0.47\n14;0.5;0.39;0.46;0.59;0.61;0.54;0.41;0.78;0.83;0.76;0.74;0.72;0.67;0.76;0.52;0.44;0.44;0.42;0.54;0.47\n15;0.39;0.2;0.26;0.34;0.28;0.4;0.48;0.58;0.77;0.9;0.59;0.61;0.75;0.82;0.79;0.59;0.38;0.58;0.3;0.5\n16;0.26;0.15;0.1;0.19;0.21;0.32;0.53;0.4;0.53;0.52;0.69;0.76;0.69;0.59;0.82;0.5;0.61;0.75;0.63;0.53\n17;0.23;0.09;0.16;0.34;0.36;0.52;0.45;0.6;0.55;0.66;0.5;0.77;0.68;0.69;0.68;0.76;0.55;0.68;0.6;0.32\n18;0.0;0.06;0.23;0.21;0.36;0.49;0.32;0.39;0.44;0.52;0.53;0.8;0.54;0.72;0.76;0.79;0.52;0.56;0.42;0.65\n19;0.0;0.0;0.13;0.1;0.37;0.5;0.25;0.42;0.36;0.33;0.59;0.68;0.5;0.54;0.81;0.78;0.56;0.65;0.68;0.54\n20;0.17;0.13;0.23;0.14;0.29;0.33;0.37;0.43;0.37;0.36;0.38;0.73;0.66;0.81;0.75;0.71;0.71;0.6;0.8;0.64\n21;0.0;0.08;0.23;0.09;0.33;0.16;0.23;0.28;0.32;0.27;0.63;0.58;0.48;0.65;0.83;0.6;0.79;0.73;0.89;0.51\n22;0.0;0.09;0.1;0.04;0.0;0.34;0.04;0.44;0.43;0.16;0.5;0.61;0.56;0.5;0.45;0.75;0.71;0.78;0.92;0.71\n23;0.0;0.0;0.0;0.12;0.0;0.3;0.04;0.22;0.4;0.41;0.21;0.48;0.49;0.42;0.55;0.76;0.45;0.64;0.7;0.89\n`\n\nconst getRows = (path) => {\n  // Uncomment to read from weights.csv (can't do in browser)\n  // const csvString = fs.readFileSync(path, {encoding: 'utf8'})\n  const csvString = mockCsvStr \n  return csvString.split('\\n').slice(0,-1).map(row => row.split(';').slice(1))\n}\n\nconst getWeights = (path) => {\n  const weightRows = getRows(path).slice(5)\n  return weightRows.map(row => row.map(Number))\n}\n\nexport const getCourses = (path) => {\n  const [ codes, names, descriptions, oodiLinks, myCoLinks ] = getRows(path).slice(0,5)\n  return codes.map((code, index) => {\n    return {\n      index,\n      code,\n      name: names[index],\n      description: descriptions[index],\n      oodiLink: oodiLinks[index],\n      myCoLink: myCoLinks[index],\n      completed: false,\n    }\n  })\n}\n\n// v is steepness of sigmoid\nconst sigmoid = (v, x) => {\n  const c = Math.exp(-v/2)\n  return c/(c+Math.exp(-v*x))\n}\n\nexport const recommendCourses = (courseList) => {\n  const W = getWeights(PATH)\n  const completedCourses = courseList.map(course => course.completed)\n  const completedLength = Math.max(1, completedCourses.filter(Boolean).length)\n  const courseRank = (courses, W) => {\n    const rankedCourses = math.multiply(courses, W)\n    const filtered = []\n    for (let i = 0; i < courses.length; i++) {\n      if (!courses[i]) {\n        filtered.push({\n          ...courseList[i],\n          mIndex: rankedCourses[i] === 0 ? 0 : sigmoid(9, rankedCourses[i] / completedLength) * 100,\n          // mIndex: rankedCourses[i] / completedLength * 100,\n          // mIndex: rankedCourses[i]/l + (0.99 - rankedCourses[i]/l) * (1/4 * (Math.log(Math.max(0.019, rankedCourses[i]/l))) + 1)\n        })\n      }\n    }\n    return filtered.sort((a, b) => b.mIndex-a.mIndex)\n  }\n  return courseRank(completedCourses, W)\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Course from './components/Course'\nimport CourseRec from './components/CourseRec'\nimport { recommendCourses, getCourses } from'./db'\nimport Tabs from 'react-bootstrap/Tabs'\nimport Tab from 'react-bootstrap/Tab'\nimport Accordion from 'react-bootstrap/Accordion'\n\nclass App extends Component {\n\n  state = {\n    courses: [],\n    recommendedCourses: [],\n  }\n  \n  handleClick = (clickedCourse) => {\n    this.setState(prevState => {\n      const courses = prevState.courses.map(course => {\n        if (course.code === clickedCourse) {\n          course.completed = !course.completed\n        }\n        return course\n      })\n      return {\n        courses,\n        recommendedCourses: recommendCourses(courses)\n      }\n    })\n  }\n\n  componentDidMount() {\n    const courses = getCourses('./data/weights.csv')\n    this.setState({\n      courses,\n      recommendedCourses: recommendCourses(courses),\n    })\n  }\n\n  render() {\n    const { courses, recommendedCourses } = this.state\n    return (\n      <div className=\"App\">\n        <Tabs defaultActiveKey='completed'>\n          <Tab eventKey=\"completed\" title=\"Completed\">\n            <div>\n              {courses.map(c => (\n                <Course\n                  key={c.code}\n                  name={c.name}\n                  code={c.code}\n                  completed={c.completed}\n                  handleClick={this.handleClick}\n                />\n              ))}\n            </div>\n          </Tab>\n          <Tab eventKey=\"recommendations\" title=\"Recommendations\">\n            <div className='mt-1'>\n              <Accordion>\n                {recommendedCourses.map((c, i) => (\n                  <CourseRec\n                    index={i}\n                    key={c.code}\n                    name={c.name}\n                    description={c.description}\n                    oodiLink={c.oodiLink}\n                    myCoLink={c.myCoLink}\n                    code={c.code}\n                    mIndex={c.mIndex}  \n                  />\n                ))}\n              </Accordion>\n           </div>\n          </Tab>\n        </Tabs>\n     </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}